
var ee = require('events').EventEmitter
var util = require('util')
var stream = require('stream')

var controlStream = module.exports.controlStream = function () {
    var self = this
    this.buffer = new Buffer(0)
    this.recieving = true;
    this.writable = true
    stream.apply(this)
    ee.call(this)

    var read = new reader(this)

    this.__defineSetter__('curser', function (value) {
        read.curser = value;
    })

    this.read = function (bytes, cb) {
        read.read(bytes, cb)
    }

    this.on('pipe', function (source) {
        source.on('end', function () {
            self.recieving = false
        })
    })
}
util.inherits(controlStream, stream)

var reader = module.exports.reader =  function(readStream, options){
	this.stream = readStream
	this.curser = 0;	//has not read anything yet
}

reader.prototype.read = function(bytes, cb){
	var self = this
	var args = [arguments[0],arguments[1]]
	if(this.stream.buffer.length<(this.curser+bytes)){
		if(this.stream.recieving === false){
			bytes = this.stream.buffer.length-this.curser
			var buff1 = new Buffer(bytes)
			this.stream.buffer.copy(buff1,0,this.curser,this.curser+bytes)
			this.curser+=bytes
			cb(null, buff1)
		}else{
			this.stream.on('data', function(){
				reader.prototype.read.apply(self, args)
			})
		}
		//bytes = this.stream.buffer.length - this.curser;
	}else{
		var buff1 = new Buffer(bytes)
		this.stream.buffer.copy(buff1,0,this.curser,this.curser+bytes)
		this.curser+=bytes
			
		cb(null,buff1)
	}
}

controlStream.prototype.write = function(data){
	if(!Buffer.isBuffer(data))
		throw new Error('must be buffer')

	this.buffer = Buffer.concat([this.buffer, data])
	this.emit('data')	
}

controlStream.prototype.end = function (data) {
    if (data)
        this.write(data)
    this.recieving = false;
    this.emit('end')
}

controlStream.prototype.pipe = function (dest, options) {
    var self = this;
    var options = options || {}
    var pace = options.pace || 1024
    var read = new reader(this)
    function flow() {
        read.read(pace, function (err, data) {
            
            function again() {
                if (options.hasOwnProperty('cadence')) {
                    setTimeout(function () { flow() }, options.cadence)
                } else {
                    process.nextTick(function () { flow() })
                }

            }

            if (data.length === 0) {
                dest.end()
            } else {
                var write = dest.write(data)
                if (write === true) {
                    again()
                } else {
                    dest.on('drain', function () {
                        again()
                    })
                }
            }
        })
    }
    flow()
    return dest
}





